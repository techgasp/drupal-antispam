<?php

/**
 * @file
 * Installation functions for Spam Master module.
 */

use Drupal\user\RoleInterface;
use Drupal\spammaster\Controller\SpamMasterMailController;

/**
 * Implements hook_install().
 */
function spammaster_install() {
  user_role_change_permissions(RoleInterface::ANONYMOUS_ID, [
    'generate spam master' => TRUE,
  ]);
  // Set spam master version necessary license creation data.
  \Drupal::configFactory()->getEditable('spammaster.settings_protection')
    ->set('spammaster.block_message', 'Your Email, Domain, or Ip are banned.')
    ->set('spammaster.basic_firewall', '1')
    ->set('spammaster.basic_registration', '1')
    ->set('spammaster.basic_comment', '1')
    ->set('spammaster.basic_contact', '1')
    ->set('spammaster.extra_recaptcha', '0')
    ->set('spammaster.extra_recaptcha_login', '0')
    ->set('spammaster.extra_recaptcha_registration', '0')
    ->set('spammaster.extra_recaptcha_comment', '0')
    ->set('spammaster.extra_recaptcha_contact', '0')
    ->set('spammaster.extra_honeypot', '1')
    ->set('spammaster.extra_honeypot_login', '1')
    ->set('spammaster.extra_honeypot_registration', '1')
    ->set('spammaster.extra_honeypot_comment', '1')
    ->set('spammaster.extra_honeypot_contact', '1')
    ->set('spammaster.signature_registration', '1')
    ->set('spammaster.signature_login', '1')
    ->set('spammaster.signature_comment', '1')
    ->set('spammaster.signature_contact', '1')
    ->set('spammaster.email_alert_3', '1')
    ->set('spammaster.email_daily_report', '0')
    ->set('spammaster.email_weekly_report', '0')
    ->set('spammaster.email_improve', '1')
    ->save();
  // Get module settings.
  $site_settings = \Drupal::config('system.site');
  $spammaster_settings = \Drupal::config('spammaster.settings');

  // Create lic hash.
  $spammaster_lic_hash = md5(uniqid(mt_rand(), TRUE));

  // Colect data.
  $spammaster_platform = 'Drupal';
  $spammaster_platform_version = \Drupal::VERSION;
  $spammaster_platform_type = 'NO';
  $spammaster_n_websites = '0';
  $spammaster_multisite_joined = $spammaster_platform_type . ' - ' . $spammaster_n_websites;
  $spammaster_version = constant('SPAMMASTER_VERSION');
  $spammaster_type = 'TRIAL';
  $spammaster_lic_nounce = "PW9pdXNkbmVXMndzUw==";
  $spammaster_cron = "FALSE";
  $spammaster_site_name = $site_settings->get('name');
  $spammaster_site_url = \Drupal::request()->getHost();
  $address_unclean = $spammaster_site_url;
  $address = preg_replace('#^https?://#', '', $address_unclean);
  $spammaster_admin_email = $site_settings->get('mail');
  $spammaster_ip = $_SERVER['SERVER_ADDR'];
  // If empty ip.
  if (empty($spammaster_ip) || $spammaster_ip == '0') {
    $spammaster_ip = 'I ' . gethostbyname($_SERVER['HTTP_HOST']);
  }
  $spammaster_hostname = gethostbyaddr($_SERVER['SERVER_ADDR']);
  // If empty host.
  if (empty($spammaster_hostname) || $spammaster_hostname == '0') {
    $spammaster_hostname = 'H ' . gethostbyname($_SERVER['HTTP_HOST']);
  }

  // Encode ssl post link for security.
  $spammaster_license_url = 'aHR0cHM6Ly9zcGFtbWFzdGVyLnRlY2hnYXNwLmNvbS93cC1jb250ZW50L3BsdWdpbnMvc3BhbS1tYXN0ZXItYWRtaW5pc3RyYXRvci9pbmNsdWRlcy9saWNlbnNlL2xpY190cmlhbC5waHA=';

  // Call drupal hhtpclient.
  $client = \Drupal::httpClient();
  // Post data.
  $request = $client->post(base64_decode($spammaster_license_url), [
    'form_params' => [
      'spam_license_key' => $spammaster_lic_hash,
      'spam_trial_nounce' => $spammaster_lic_nounce,
      'platform' => $spammaster_platform,
      'platform_version' => $spammaster_platform_version,
      'platform_type' => $spammaster_multisite_joined,
      'spam_master_version' => $spammaster_version,
      'spam_master_type' => $spammaster_n_websites,
      'blog_name' => $spammaster_site_name,
      'blog_address' => $address,
      'blog_email' => $spammaster_admin_email,
      'blog_hostname' => $spammaster_hostname,
      'blog_ip' => $spammaster_ip,
      'spam_master_cron' => $spammaster_cron,
    ],
  ]);
  // Decode json data.
  $response = json_decode($request->getBody(), TRUE);
  if (empty($response)) {
    $spammaster_type_set = 'EMPTY';
    $spammaster_status = 'INACTIVE';
    $spammaster_protection_total_number = '0';
    $spammaster_alert_level_received = '';
    $spammaster_alert_level_p_text = '';
  }
  else {
    $spammaster_status = $response['status'];
    if ($spammaster_status == 'MALFUNCTION_3') {
      $spammaster_type_set = 'MALFUNCTION_3';
      $spammaster_protection_total_number = 'MALFUNCTION_3';
      $spammaster_alert_level_received = 'MALFUNCTION_3';
      $spammaster_alert_level_p_text = 'MALFUNCTION_3';
    }
    else {
      $spammaster_type_set = $response['type'];
      $spammaster_protection_total_number = $response['threats'];
      $spammaster_alert_level_received = $response['alert'];
      $spammaster_alert_level_p_text = $response['percent'];
    }
  }
  // Store received data in module settings.
  Drupal::configFactory()->getEditable('spammaster.settings')
    ->set('spammaster.license_key', $spammaster_lic_hash)
    ->set('spammaster.type', $spammaster_type_set)
    ->set('spammaster.license_status', $spammaster_status)
    ->set('spammaster.license_alert_level', $spammaster_alert_level_received)
    ->set('spammaster.license_protection', $spammaster_protection_total_number)
    ->set('spammaster.license_probability', $spammaster_alert_level_p_text)
    ->save();

  // MailController call.
  $spammaster_mail_controller = new SpamMasterMailController();
  $spammaster_mail_send = $spammaster_mail_controller->spammasterlictrialcreation();
}

/**
 * Updates to module settings.
 */
function spammaster_update_01() {
  // 19042018.
  \Drupal::configFactory()->getEditable('spammaster.settings.version')
    ->delete();
}

/**
 * Implements Spam Master db schema hook().
 */
function spammaster_schema() {
  $schema['spammaster_threats'] = [
    'description' => 'Threats log.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'ID of IP or email threat.',
      ],
      'date' => [
        'type' => 'varchar',
        'length' => 19,
        'not null' => TRUE,
        'description' => 'Insertion time and date.',
      ],
      'threat' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'description' => 'IP or email',
      ],
    ],
    'primary key' => ['id'],
  ];

  $schema['spammaster_keys'] = [
    'description' => 'Variable, log, and other info.',
    'fields' => [
      'id' => [
        'type' => 'serial',
        'size' => 'normal',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'ID of key.',
      ],
      'date' => [
        'type' => 'varchar',
        'length' => 19,
        'not null' => TRUE,
        'description' => 'Insertion time and date.',
      ],
      'spamkey' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'description' => 'Key type.',
      ],
      'spamvalue' => [
        'type' => 'text',
        'size' => 'normal',
        'not null' => TRUE,
        'description' => 'Key value',
      ],
    ],
    'primary key' => ['id'],
  ];

  return $schema;
}
