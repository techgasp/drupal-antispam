<?php

/**
 * @file
 * Spam Master code implementation.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\spammaster\Controller\SpamMasterCronController;
use Drupal\spammaster\Controller\SpamMasterRegistrationController;
use Drupal\spammaster\Controller\SpamMasterCommentController;
use Drupal\spammaster\Controller\SpamMasterContactController;
use Drupal\Core\Url;

define('SPAMMASTER_VERSION', '1.0-rc15');

/**
 * Implements hook_help().
 */
function spammaster_help($process_name, RouteMatchInterface $route_match) {

  $spammaster_version = constant('SPAMMASTER_VERSION');

  switch ($process_name) {
    case 'help.page.spammaster':
      $output_help = '<h3>' . t('About') . '</h3>';
      $output_help .= '<p>' . t('Spam Master scans and blocks new Drupal user registrations, comments and threads.') . '</p>';
      $output_help .= '<p>' . t('Spam Master uses real time anti-spam blocking lists provided by https://spammaster.techgasp.com.') . '</p>';
      $output_help .= '<p>' . t('Spam Master checks ips, ranges, emails, domains and words or text via heuristics.') . '</p>';
      $output_help .= '<p>' . t('Spam Master can be implemented on new registrations, logins, new comments and threads.') . '</p>';
      $output_help .= '<h3>' . t('Version') . '</h3>';
      $output_help .= '<p>' . t('Your Spam Master version is:') . ' ' . $spammaster_version . '</p>';
      $output_help .= '<h3>' . t('Options') . '</h3>';
      $output_help .= '<p>' . t('Spam Master is packed with otions and statistics, please visit the module configuration page.') . '</p>';
      $output_help .= '<h3>' . t('Configuration') . '</h3>';
      $output_help .= '<p>' . t('All settings are available via module settings, configuration page, link below.') . '</p>';
      $output_help .= '<p>' . t('Visit the project <a href="@spammaster_url">Spam Master</a>.', ['@spammaster_url' => 'https://spammaster.techgasp.com/']) . '</p>';
      $output_help .= '<h3>' . t('More') . '</h3>';
      $output_help .= '<p>' . t('Future versions may include several types of API enhacements.') . '</p>';
      return $output_help;
  }

}

/**
 * Implements cron().
 */
function spammaster_cron() {

  // Implements cron crontroller.
  $spammaster_cron_controller = new SpamMasterCronController();

  // Implements daily cron.
  if (REQUEST_TIME - \Drupal::state()->get('spammaster.daily_con') >= 86400) {
    \Drupal::state()->set('spammaster.daily_con', REQUEST_TIME);

    // CronController Call.
    $spammaster_daily_cron = $spammaster_cron_controller->spammasterdailycron();

    // Watchdog log.
    \Drupal::logger('spammaster')->notice('Spam Master: daily cron run successfully');

    // Spam Master log.
    $spammaster_date = date('Y-m-d H:i:s');
    $spammaster_db_mail_insert = db_insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster',
      'spamvalue' => 'Spam Master: daily cron run successfully',
    ])->execute();
  }

  // Implements weekly cron.
  if (REQUEST_TIME - \Drupal::state()->get('spammaster.weekly_con') >= 518400) {
    \Drupal::state()->set('spammaster.weekly_con', REQUEST_TIME);

    // CronController Call.
    $spammaster_weekly_cron = $spammaster_cron_controller->spammasterweeklycron();

    // Watchdog log.
    \Drupal::logger('spammaster')->notice('Spam Master: weekly cron run successfully');

    // Spam Master log.
    $spammaster_date = date('Y-m-d H:i:s');
    $spammaster_db_mail_insert = db_insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster',
      'spamvalue' => 'Spam Master: weekly cron run successfully',
    ])->execute();
  }

}

/**
 * Implements firewall theme().
 */
function spammaster_theme($existing, $type, $theme, $path) {

  return [
    'firewall' => [
      'variables' => [],
    ],
    'statistics' => [
      'variables' => [
        'spam_master_today_minus_1' => NULL,
        'spam_master_today_minus_2' => NULL,
        'spam_master_today_minus_3' => NULL,
        'spam_master_today_minus_4' => NULL,
        'spam_master_today_minus_5' => NULL,
        'totalitems_firewall_blocked_1' => NULL,
        'totalitems_firewall_blocked_2' => NULL,
        'totalitems_firewall_blocked_3' => NULL,
        'totalitems_firewall_blocked_4' => NULL,
        'totalitems_firewall_blocked_5' => NULL,
        'totalitems_registration_blocked_1' => NULL,
        'totalitems_registration_blocked_2' => NULL,
        'totalitems_registration_blocked_3' => NULL,
        'totalitems_registration_blocked_4' => NULL,
        'totalitems_registration_blocked_5' => NULL,
        'totalitems_comment_blocked_1' => NULL,
        'totalitems_comment_blocked_2' => NULL,
        'totalitems_comment_blocked_3' => NULL,
        'totalitems_comment_blocked_4' => NULL,
        'totalitems_comment_blocked_5' => NULL,
        'totalitems_contact_blocked_1' => NULL,
        'totalitems_contact_blocked_2' => NULL,
        'totalitems_contact_blocked_3' => NULL,
        'totalitems_contact_blocked_4' => NULL,
        'totalitems_contact_blocked_5' => NULL,
        'totalitems_honeypot_blocked_1' => NULL,
        'totalitems_honeypot_blocked_2' => NULL,
        'totalitems_honeypot_blocked_3' => NULL,
        'totalitems_honeypot_blocked_4' => NULL,
        'totalitems_honeypot_blocked_5' => NULL,
        'totalitems_recaptcha_blocked_1' => NULL,
        'totalitems_recaptcha_blocked_2' => NULL,
        'totalitems_recaptcha_blocked_3' => NULL,
        'totalitems_recaptcha_blocked_4' => NULL,
        'totalitems_recaptcha_blocked_5' => NULL,
        'total_count' => NULL,
        'total_count_firewall' => NULL,
        'total_count_registration' => NULL,
        'total_count_comment' => NULL,
        'total_count_contact' => NULL,
        'total_count_honeypot' => NULL,
        'total_count_recaptcha' => NULL,
        'spam_master_month_minus_1' => NULL,
        'spam_master_month_minus_2' => NULL,
        'spam_master_month_minus_3' => NULL,
        'total_month_firewall_1' => NULL,
        'total_month_firewall_2' => NULL,
        'total_month_firewall_3' => NULL,
        'total_month_registration_1' => NULL,
        'total_month_registration_2' => NULL,
        'total_month_registration_3' => NULL,
        'total_month_comment_1' => NULL,
        'total_month_comment_2' => NULL,
        'total_month_comment_3' => NULL,
        'total_month_contact_1' => NULL,
        'total_month_contact_2' => NULL,
        'total_month_contact_3' => NULL,
        'total_month_honeypot_1' => NULL,
        'total_month_honeypot_2' => NULL,
        'total_month_honeypot_3' => NULL,
        'total_month_recaptcha_1' => NULL,
        'total_month_recaptcha_2' => NULL,
        'total_month_recaptcha_3' => NULL,
      ],
    ],
    'total_count' => [
      'variables' => [
        'spammaster_total_threats_count' => NULL,
        'spammaster_total_threats_footer' => NULL,
      ],
    ],
    'heads_up' => [
      'variables' => [
        'spammaster_table_head' => NULL,
        'image_check' => NULL,
        'image_pass' => NULL,
        'image_lock' => NULL,
        'image_inactive' => NULL,
        'protection_engine_version_text' => NULL,
        'protection_engine_version' => NULL,
        'protection_license_protection_text' => NULL,
        'protection_license_protection' => NULL,
        'protection_license_protection_end' => NULL,
        'protection_scan_text' => NULL,
        'protection_firewall_text' => NULL,
        'spam_ssl_image' => NULL,
        'spam_ssl_text' => NULL,
        'spammaster_table_footer' => NULL,
      ],
    ],
    'firewall_status' => [
      'variables' => [
        'spammaster_table_head' => NULL,
        'image_path' => NULL,
        'output_d1' => NULL,
        'output_t2' => NULL,
        'output_d3' => NULL,
        'output_t4' => NULL,
        'output_d5' => NULL,
        'output_t6' => NULL,
        'output_d7' => NULL,
        'output_t8' => NULL,
        'output_d9' => NULL,
        'output_t10' => NULL,
        'output_d11' => NULL,
        'output_t12' => NULL,
        'output_d13' => NULL,
        'output_t14' => NULL,
        'output_d15' => NULL,
        'output_t16' => NULL,
        'spammaster_table_footer' => NULL,
      ],
    ],
  ];

}

/**
 * Implements hook_mail().
 */
function spammaster_mail($key, &$message, $params) {

  $options = [
    'langcode' => $message['langcode'],
  ];

  switch ($key) {
    case 'license_trial_create':
      $spammaster_subject_title = 'Congratulations!!!';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_trial_end':
      $spammaster_subject_title = 'License Expired!!!';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_full_end':
      $spammaster_subject_title = 'License Expired!!!';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'license_malfunction':
      $spammaster_subject_title = 'Warning!!! License Malfunction';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'lic_alert_level_3':
      $spammaster_subject_title = 'Warning!!! Your site is in Alert Level 3';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_daily_report':
      $spammaster_subject_title = 'Daily Report';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_weekly_report':
      $spammaster_subject_title = 'Weekly Report';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

    case 'mail_help_report':
      $spammaster_subject_title = 'Weekly Report';
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = $spammaster_subject_title;
      $message['body'][] = $params['message'];
      break;

  }

}

/**
 * Implements hook_page_top() for drupal_set_message().
 */
function spammaster_page_top(array &$page_top) {

  // Get module settings.
  $spammaster_settings = \Drupal::config('spammaster.settings');
  $response_key = $spammaster_settings->get('spammaster.license_status');
  if ($response_key == 'VALID') {
  }
  else {
    $route = \Drupal::routeMatch()->getRouteObject();
    $is_admin = \Drupal::service('router.admin_context')->isAdminRoute($route);
    if ($is_admin) {
      if ($response_key == 'INACTIVE') {
        drupal_set_message(t('Spam Master is INACTIVE. You are not Protected!!! Make sure to visit the module settings page and insert a trial or full license. Press Save & Refresh License.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_1') {
        drupal_set_message(t('Spam Master MALFUNCTION 1 detected. Not up to date!!! You are protected, not to worry. Your Spam Master version is at least 5 versions older than the current available version. Warning will auto disappear once Spam Master is updated and re-syncs with the RBL servers or, by pressing Save & Refresh License button in Spam Master settings page.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_2') {
        drupal_set_message(t('Spam Master MALFUNCTION 2 detected. You are protected but your Spam Master version is at least 10 versions older than the current available version. Urgently update Spam Master to latest version. Warning will auto disappear once Spam Master is updated and re-syncs with the RBL servers or, by pressing Save & Refresh License button in Spam Master settings page.'), 'error');
      }
      if ($response_key == 'MALFUNCTION_3') {
        drupal_set_message(t('Spam Master MALFUNCTION 3 detected. You are not Protected!!! Get in touch with TechGasp support team. Warning will auto disappear once malfunction is fixed.'), 'error');
      }
      if ($response_key == 'EXPIRED') {
        $spammaster_type = $spammaster_settings->get('spammaster.type');
        if ($spammaster_type == 'TRIAL') {
          drupal_set_message(t('Spam Master trial EXPIRED. Hope you have enjoyed the bombastic spam protection provided by Spam Master. Unfortunately your website is now unprotected and may be subjected to thousands of spam threats & exploits. Not to worry! If you enjoyed the protection you can quickly get a full license, it costs peanuts per year, go to your Spam Master settings page and click "Get full rbl license" link.'), 'error');
        }
        if ($spammaster_type == 'FULL') {
          drupal_set_message(t('Spam Master is EXPIRED. Hope you have enjoyed 1 year of bombastic spam protection provided by Spam Master. Unfortunately your website is now unprotected and may be subjected to thousands of spam threats & exploits. Not to worry! If you enjoyed the protection you can quickly get another license, it costs peanuts per year, go to your Spam Master settings page and click "Get full rbl license" link.'), 'error');
        }
      }
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function spammaster_form_user_login_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $login_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $login_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_login = $spammaster_settings_protection->get('spammaster.signature_login');

  if ($signature_login != 0) {
    $form['spammaster_signature_login'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://spammaster.techgasp.com' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Implements reCaptcha form.
  if ($login_extra_recaptcha != 0) {
    $login_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_login');
    if ($login_extra_recaptcha_field != 0) {
      $form['spammaster_page'] = [
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => 'login',
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ];
      $form = spammaster_recaptcha_form($form, $form_state);
      $form['#validate'][] = 'spammaster_recaptcha_validate';
    }
  }
  // Implements Honeypot form.
  if ($login_extra_honeypot != 0) {
    $login_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_login');
    if ($login_extra_honeypot_field != 0) {
      $form['spammaster_page'] = [
        '#type' => 'textfield',
        '#disabled' => TRUE,
        '#default_value' => 'login',
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ];
      $form = spammaster_honeypot_form($form, $form_state);
      $form['#validate'][] = 'spammaster_honeypot_validate';
    }
  }

}

/**
 * Implements hook_form_alter().
 */
function spammaster_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $registration_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $registration_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $registration_signature = $spammaster_settings_protection->get('spammaster.signature_registration');
  $basic_registration = $spammaster_settings_protection->get('spammaster.basic_registration');

  // Implements Signature form.
  if ($registration_signature != 0) {
    $form['spammaster_signature_registration'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://spammaster.techgasp.com' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in user registration form.
  // Check ip and email via local db and api.
  $user_forms = ['user_register_form'];

  if (in_array($form_id, $user_forms)) {
    // Add a new validation handler to the form if settings are active.
    if ($basic_registration != 0) {
      $form['#validate'][] = 'spammaster_registration_validate';
    }
    // Implements reCaptcha form.
    if ($registration_extra_recaptcha != 0) {
      $registration_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_registration');
      if ($registration_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'registration',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($registration_extra_honeypot != 0) {
      $registration_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_registration');
      if ($registration_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'registration',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements validate().
 */
function spammaster_registration_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  $spammasteremail = $form_state->getValue('mail');
  $formstate = $form_state;
  // RegistrationController Call.
  $spammaster_registration_controller = new SpamMasterRegistrationController();
  $spammaster_registration_check = $spammaster_registration_controller->spammasterregistrationcheck($form, $formstate, $spammasterip, $spammasteremail);

}

/**
 * Implements hook_form_alter().
 */
function spammaster_form_contact_message_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $contact_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $contact_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_contact = $spammaster_settings_protection->get('spammaster.signature_contact');
  $basic_contact = $spammaster_settings_protection->get('spammaster.basic_contact');
  if ($signature_contact != 0) {
    $form['spammaster_signature_contact'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://spammaster.techgasp.com' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in contact form.
  // Check ip and email via local db and api.
  $user_forms = [$form_id];

  if (in_array($form_id, $user_forms)) {
    $spammaster_anonymous = \Drupal::currentUser()->isAnonymous();
    // Add a new validation handler to the form if setting is active.
    if ($basic_contact != 0 && $spammaster_anonymous) {
      $form['#validate'][] = 'spammaster_contact_validate';
    }
    // Implements reCaptcha form.
    if ($contact_extra_recaptcha != 0) {
      $contact_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_contact');
      if ($contact_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'contact',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($contact_extra_honeypot != 0) {
      $contact_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_contact');
      if ($contact_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'contact',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements validate().
 */
function spammaster_contact_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  $spammasteremail = $form_state->getValue('mail');
  $formstate = $form_state;
  $spammastermessage = $form_state->getValue('message')[0]['value'];
  // ContactController Call.
  $spammaster_contact_controller = new SpamMasterContactController();
  $spammaster_contact_check = $spammaster_contact_controller->spammastercontactcheck($form, $formstate, $spammasterip, $spammasteremail, $spammastermessage);

}

/**
 * Implements hook_form_alter().
 */
function spammaster_form_comment_form_alter(&$form, &$form_state, $form_id) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $comment_extra_recaptcha = $spammaster_settings_protection->get('spammaster.extra_recaptcha');
  $comment_extra_honeypot = $spammaster_settings_protection->get('spammaster.extra_honeypot');
  $signature_comment = $spammaster_settings_protection->get('spammaster.signature_comment');
  $basic_comment = $spammaster_settings_protection->get('spammaster.basic_comment');
  if ($signature_comment != 0) {
    $form['spammaster_signature_comment'] = [
      '#type' => 'item',
      '#markup' => t("<a href='https://spammaster.techgasp.com' target='_blank'>Protected by Spam Master</a>"),
      '#required' => FALSE,
      '#weight' => 999,
    ];
  }
  // Check for spam in comment form.
  // Check ip and email via local db and api.
  $user_forms = [$form_id];

  if (in_array($form_id, $user_forms)) {
    $spammaster_anonymous = \Drupal::currentUser()->isAnonymous();
    // Add a new validation handler to the form if setting is active.
    if ($basic_comment != 0 && $spammaster_anonymous) {
      $form['#validate'][] = 'spammaster_comment_validate';
    }
    // Implements reCaptcha form.
    if ($comment_extra_recaptcha != 0) {
      $comment_extra_recaptcha_field = $spammaster_settings_protection->get('spammaster.extra_recaptcha_comment');
      if ($comment_extra_recaptcha_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'comment',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_recaptcha_form($form, $form_state);
        $form['#validate'][] = 'spammaster_recaptcha_validate';
      }
    }
    // Implements Honeypot form.
    if ($comment_extra_honeypot != 0) {
      $comment_extra_honeypot_field = $spammaster_settings_protection->get('spammaster.extra_honeypot_comment');
      if ($comment_extra_honeypot_field != 0) {
        $form['spammaster_page'] = [
          '#type' => 'textfield',
          '#disabled' => TRUE,
          '#default_value' => 'comment',
          '#attributes' => [
            'class' => [
              'spammaster_special_class',
            ],
            'style' => [
              'display: none !important;',
            ],
          ],
        ];
        $form = spammaster_honeypot_form($form, $form_state);
        $form['#validate'][] = 'spammaster_honeypot_validate';
      }
    }
  }

}

/**
 * Implements validate().
 */
function spammaster_comment_validate(&$form, &$form_state) {

  $spammasterip = \Drupal::request()->getClientIp();
  $spammasteremail = $form_state->getValue('mail');
  $formstate = $form_state;
  if (empty($spammasteremail) || is_array($spammasteremail)) {
    $spammasteremail = 'drup@' . date('Ymdhis') . '.drup';
  }
  $spammastercomment = $form_state->getValue('comment_body')[0]['value'];
  // CommentController Call.
  $spammaster_comment_controller = new SpamMasterCommentController();
  $spammaster_comment_check = $spammaster_comment_controller->spammastercommentcheck($form, $formstate, $spammasterip, $spammasteremail, $spammastercomment);

}

/**
 * Implements form().
 */
function spammaster_recaptcha_form(&$form, &$form_state) {

  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $extra_recaptcha_api_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_key');

  $form['spammaster_recaptcha_field'] = [
    '#markup' => '<div class="spammaster-recaptcha g-recaptcha form-group" data-sitekey="' . $extra_recaptcha_api_key . '"></div>',
    '#weight' => 99,
    '#attached' => [
      'html_head' => [
        [
          [
            '#tag' => 'script',
            '#attributes' => [
              'src' => Url::fromUri('https://www.google.com/recaptcha/api.js', ['query' => ['hl' => \Drupal::service('language_manager')->getCurrentLanguage()->getId()], 'absolute' => TRUE])->toString(),
              'async' => TRUE,
              'defer' => TRUE,
            ],
          ],
          'spammaster_recaptcha',
        ],
      ],
      'library' => [
        'spammaster/spammaster-styles',
      ],
    ],
  ];

  return $form;

}

/**
 * Implements validate().
 */
function spammaster_recaptcha_validate(&$form, &$form_state) {

  // Get Module Settings.
  $spammaster_settings = \Drupal::config('spammaster.settings');
  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $spammaster_block_message = $spammaster_settings_protection->get('spammaster.block_message');
  $extra_recaptcha_api_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_key');
  $extra_recaptcha_api_secret_key = $spammaster_settings_protection->get('spammaster.extra_recaptcha_api_secret_key');

  $spammaster_page = $form_state->getValue('spammaster_page');

  if (isset($_POST['g-recaptcha-response'])) {
    $client = \Drupal::httpClient();
    $response = $client->get('https://www.google.com/recaptcha/api/siteverify?secret=' . $extra_recaptcha_api_secret_key . '&response=' . $_POST['g-recaptcha-response']);
    $response = json_decode($response->getBody(), TRUE);

    if (empty($_POST['g-recaptcha-response'])) {
      $form_state->setErrorByName('spammaster_recaptcha_field', 'SPAM MASTER: Please verify the reCaptcha.');
    }
    if (empty($extra_recaptcha_api_key) || empty($extra_recaptcha_api_secret_key)) {
      $form_state->setErrorByName('spammaster_recaptcha_field', 'SPAM MASTER: No Google reCaptcha V2 API keys set. Please insert the Google reCaptcha API key and API secret key the in Spam Master Settings page.');
    }
    if (FALSE === $response['success']) {

      $spammaster_ip = \Drupal::request()->getClientIp();
      $form_state->setErrorByName('spammaster_recaptcha_field', 'SPAM MASTER: Wrong reCaptcha verification. PLease try again.');

      \Drupal::logger('spammaster-recaptcha')->notice('Spam Master: ' . $spammaster_page . ' reCaptcha block IP: ' . $spammaster_ip);

      $spammaster_total_block_count = $spammaster_settings->get('spammaster.total_block_count');
      $spammaster_total_block_count_1 = ++$spammaster_total_block_count;
      \Drupal::configFactory()->getEditable('spammaster.settings')
        ->set('spammaster.total_block_count', $spammaster_total_block_count_1)
        ->save();

      $spammaster_date = date('Y-m-d H:i:s');
      $spammaster_db_recaptcha_insert = db_insert('spammaster_keys')->fields([
        'date' => $spammaster_date,
        'spamkey' => 'spammaster-recaptcha',
        'spamvalue' => 'Spam Master: ' . $spammaster_page . ' reCaptcha block IP: ' . $spammaster_ip,
      ])->execute();
    }
  }

}

/**
 * Implements form().
 */
function spammaster_honeypot_form(&$form, &$form_state) {

  $form['spammaster_extra_field_1'] = [
    '#theme_wrappers' => [
      'container' => [
        '#id' => NULL,
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ],
    ],
    '#type' => 'textfield',
    '#required' => FALSE,
    '#attributes' => [
      'autocomplete' => 'off',
    ],
    '#weight' => 97,
    '#title' => t('Insert your mother second name:'),
    '#description' => t('Insert your mother second name.'),
  ];
  $form['spammaster_extra_field_2'] = [
    '#theme_wrappers' => [
      'container' => [
        '#id' => NULL,
        '#attributes' => [
          'class' => [
            'spammaster_special_class',
          ],
          'style' => [
            'display: none !important;',
          ],
        ],
      ],
    ],
    '#type' => 'textfield',
    '#required' => FALSE,
    '#attributes' => [
      'autocomplete' => 'off',
    ],
    '#weight' => 98,
    '#title' => t('Insert your father second name:'),
    '#description' => t('Insert your father second name.'),
  ];

  return $form;

}

/**
 * Implements validate().
 */
function spammaster_honeypot_validate(&$form, &$form_state) {

  // Get Module Settings.
  $spammaster_settings = \Drupal::config('spammaster.settings');
  $spammaster_settings_protection = \Drupal::config('spammaster.settings_protection');
  $spammaster_block_message = $spammaster_settings_protection->get('spammaster.block_message');

  $spammaster_page = $form_state->getValue('spammaster_page');

  $spammasterextrafield1 = $form_state->getValue('spammaster_extra_field_1');
  $spammasterextrafield2 = $form_state->getValue('spammaster_extra_field_2');
  if (!empty($spammasterextrafield1) || !empty($spammasterextrafield2)) {
    $spammaster_ip = \Drupal::request()->getClientIp();
    $form_state->setErrorByName('spammaster_extra_field_1', 'SPAM MASTER: ' . $spammaster_block_message);

    \Drupal::logger('spammaster-honeypot')->notice('Spam Master: ' . $spammaster_page . ' honeypot block IP: ' . $spammaster_ip . ' Field 1: ' . $spammasterextrafield1 . ' Field 2: ' . $spammasterextrafield2);

    $spammaster_total_block_count = $spammaster_settings->get('spammaster.total_block_count');
    $spammaster_total_block_count_1 = ++$spammaster_total_block_count;
    \Drupal::configFactory()->getEditable('spammaster.settings')
      ->set('spammaster.total_block_count', $spammaster_total_block_count_1)
      ->save();

    $spammaster_date = date('Y-m-d H:i:s');
    $spammaster_db_honeypot_insert = db_insert('spammaster_keys')->fields([
      'date' => $spammaster_date,
      'spamkey' => 'spammaster-honeypot',
      'spamvalue' => 'Spam Master: ' . $spammaster_page . ' honeypot block IP: ' . $spammaster_ip . ' Field 1: ' . $spammasterextrafield1 . ' Field 2: ' . $spammasterextrafield2,
    ])->execute();
  }

}
